{"version":3,"sources":["logo.svg","assets/amazonkitty.jpg","components/navbar.jsx","components/originalReview.jsx","components/metaReviewForm.jsx","components/metaReview.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","state","AppBar","position","style","backgroundColor","Toolbar","IconButton","edge","href","src","MyLogo","alt","height","width","Typography","variant","Component","OriginalReview","review","Card","CardHeader","title","product_title","subheader","review_headline","CardMedia","image","require","CardContent","review_body","review_date","MetaReviewForm","name","FormControl","TextField","id","label","required","onChange","event","props","onMetaInputChange","value","this","metaReview","metaReviewAuthor","Rating","metaRating","multiline","rows","metaReviewText","Button","onClick","onSubmitPressed","fullWidth","MetaReview","Fragment","App","getRandomOriginalReview","url","a","fetch","response","json","body","status","Error","message","setState","prevState","postMetaReview","formState","saveData","product_id","requestOptions","method","headers","JSON","stringify","handleMetaInputChange","target","handleSubmitReview","Grid","container","spacing","direction","alignItems","justify","minHeight","margin","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.dc02698e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/amazonkitty.5559cdd3.jpg\";","import React, { Component } from \"react\";\nimport { AppBar, Typography, IconButton, Toolbar } from \"@material-ui/core\";\nimport MyLogo from \"../logo.svg\";\n\nclass NavBar extends Component {\n  state = {};\n  render() {\n    return (\n      <AppBar position=\"static\" style={{ backgroundColor: \"#8ea1e1\" }}>\n        <Toolbar>\n          <IconButton edge=\"start\" href=\"#\">\n            <img src={MyLogo} alt=\"Product\" height={50} width={50} />\n          </IconButton>\n          <Typography variant=\"h4\">ReviewReviewer</Typography>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Card, CardContent, CardHeader, CardMedia } from \"@material-ui/core\";\n\nconst OriginalReview = ({ review }) => {\n  return (\n    <Card style={{ position: \"relative\" }}>\n      <CardHeader\n        title={review.product_title}\n        subheader={review.review_headline}\n      ></CardHeader>\n      {/* <img src={review.image} alt=\"\" /> */}\n      <CardMedia\n        image={require(\"../assets/amazonkitty.jpg\")}\n        style={{\n          height: \"35vh\",\n          width: \"auto\",\n        }}\n      />\n      <CardContent>{review.review_body}</CardContent>\n      <CardContent>{review.review_date}</CardContent>\n    </Card>\n  );\n};\n\nexport default OriginalReview;\n","import React, { Component } from \"react\";\nimport { Rating } from \"@material-ui/lab\";\nimport { FormControl, TextField, Button } from \"@material-ui/core\";\n\nclass MetaReviewForm extends Component {\n  render() {\n    return (\n      <form name=\"metaReviewForm\">\n        <FormControl>\n          <TextField\n            name=\"metaReviewAuthor\"\n            id=\"reviewer-name\"\n            label=\"Name\"\n            variant=\"outlined\"\n            required\n            onChange={(event) => this.props.onMetaInputChange(event)}\n            value={this.props.metaReview.metaReviewAuthor}\n          ></TextField>\n\n          <Rating\n            name=\"metaRating\"\n            onChange={(event) => this.props.onMetaInputChange(event)}\n            value={this.props.metaReview.metaRating}\n          ></Rating>\n\n          <TextField\n            name=\"metaReviewText\"\n            id=\"meta-review-description\"\n            label=\"Review\"\n            multiline\n            rows={4}\n            variant=\"outlined\"\n            onChange={(event) => this.props.onMetaInputChange(event)}\n            value={this.props.metaReview.metaReviewText}\n          ></TextField>\n\n          <Button\n            onClick={(event) => this.props.onSubmitPressed(event)}\n            fullWidth\n            style={{ backgroundColor: \"#43b581\" }}\n          >\n            Submit Review\n          </Button>\n        </FormControl>\n      </form>\n    );\n  }\n}\n\nexport default MetaReviewForm;\n","import React, { Component } from \"react\";\nimport MetaReviewForm from \"./metaReviewForm\";\nimport { Card, CardContent, CardHeader } from \"@material-ui/core\";\n\nclass MetaReview extends Component {\n  render() {\n    const { metaReview, onMetaInputChange, onSubmitPressed } = this.props;\n\n    return (\n      <React.Fragment>\n        <Card style={{ position: \"relative\" }}>\n          <CardHeader title=\"Review this review!\"></CardHeader>\n          <CardContent>\n            <MetaReviewForm\n              metaReview={metaReview}\n              onMetaInputChange={onMetaInputChange}\n              onSubmitPressed={onSubmitPressed}\n            ></MetaReviewForm>\n          </CardContent>\n        </Card>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default MetaReview;\n","import React, { Component } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport NavBar from \"./components/navbar\";\nimport OriginalReview from \"./components/originalReview\";\nimport MetaReview from \"./components/metaReview\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    review: {},\n    metaReview: {},\n  };\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  componentDidMount() {\n    this.getRandomOriginalReview(\"getrandom\");\n  }\n\n  getRandomOriginalReview = async (url) => {\n    const response = await fetch(`/${url}`);\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message);\n    }\n\n    this.setState((prevState) => {\n      let review = { ...prevState.review };\n      let metaReview = { ...prevState.metaReview };\n      review = body[0];\n      return { review, metaReview };\n    });\n  };\n\n  postMetaReview = async (formState) => {\n    const saveData = { ...formState, product_id: this.state.review.product_id };\n\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ saveData }),\n    };\n    const response = await fetch(\"/savemetareview\", requestOptions);\n    const data = await response.json();\n  };\n\n  handleMetaInputChange = (event) => {\n    const {\n      target: { name, value },\n    } = event;\n\n    this.setState((prevState) => {\n      let metaReview = { ...prevState.metaReview, [name]: value };\n      return { metaReview };\n    });\n  };\n\n  handleSubmitReview = (event) => {\n    // event.preventDefault();\n    // console.log(\"before setstate \", this.state);\n    // this.setState(\n    //   (prevState) => {\n    //     let metaReview = {\n    //       ...prevState.metaReview,\n    //       product_id: this.state.review.product_id,\n    //     };\n    //     return { metaReview };\n    //   },\n    //   () => console.log(this.state)\n    //   // () => this.postMetaReview(this.state.metaReview)\n    // );\n\n    this.postMetaReview(this.state.metaReview);\n\n    this.setState((prevState) => {\n      let metaReview = { ...prevState.metaReview };\n\n      metaReview.metaReviewAuthor = \"\";\n      metaReview.metaRating = 0;\n      metaReview.metaReviewText = \"\";\n\n      return { metaReview };\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar />\n        <div>\n          <Grid\n            container\n            spacing={5}\n            direction=\"column\"\n            alignItems=\"center\"\n            justify=\"center\"\n            style={{\n              backgroundColor: \"#23272a\",\n              minHeight: \"100vh\",\n              margin: 0,\n              width: \"100%\",\n            }}\n          >\n            <Grid item>\n              <OriginalReview review={this.state.review} />\n            </Grid>\n            <Grid item>\n              <MetaReview\n                metaReview={this.state.metaReview}\n                onMetaInputChange={this.handleMetaInputChange}\n                onSubmitPressed={this.handleSubmitReview}\n              />\n            </Grid>\n          </Grid>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}