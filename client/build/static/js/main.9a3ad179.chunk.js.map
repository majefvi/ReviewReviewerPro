{"version":3,"sources":["logo.svg","components/navbar.jsx","components/originalReview.jsx","components/submitReviewProgress.jsx","components/metaReviewForm.jsx","components/metaReview.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","state","AppBar","position","style","backgroundColor","Toolbar","IconButton","edge","href","src","MyLogo","alt","height","width","Typography","variant","Component","OriginalReview","review","product_name","String","product_title","substring","Card","maxWidth","CardHeader","title","subheader","review_headline","CardMedia","image","CardContent","review_body","review_date","useStyles","makeStyles","theme","root","display","flexDirection","alignItems","placeholder","DelayingAppearance","props","classes","React","useState","query","timerRef","useRef","useEffect","clearTimeout","current","className","Fade","in","transitionDelay","unmountOnExit","CircularProgress","MetaReviewForm","name","FormControl","TextField","id","label","required","onChange","event","onMetaInputChange","value","this","metaReview","metaReviewAuthor","Rating","metaRating","multiline","rows","metaReviewText","Button","onClick","onSubmitPressed","fullWidth","MetaReview","Fragment","App","getRandomOriginalReview","url","a","fetch","response","json","body","status","Error","message","console","log","setState","prevState","postMetaReview","formState","saveData","product_id","requestOptions","method","headers","JSON","stringify","handleMetaInputChange","target","handleSubmitReview","Grid","container","spacing","direction","justify","minHeight","margin","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.9a3ad179.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.364f3eb3.svg\";","import React, { Component } from \"react\";\nimport { AppBar, Typography, IconButton, Toolbar } from \"@material-ui/core\";\nimport MyLogo from \"../logo.svg\";\n\nclass NavBar extends Component {\n  state = {};\n  render() {\n    return (\n      <AppBar position=\"static\" style={{ backgroundColor: \"#8ea1e1\" }}>\n        <Toolbar>\n          <IconButton edge=\"start\" href=\"#\">\n            <img src={MyLogo} alt=\"Product\" height={50} width={50} />\n          </IconButton>\n          <Typography variant=\"h4\">ReviewReviewer</Typography>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Card, CardContent, CardHeader, CardMedia } from \"@material-ui/core\";\n\nconst OriginalReview = ({ review }) => {\n  // console.log(\"review in: \", review);\n  const product_name = String(review.product_title).substring(0, 5);\n  // console.log(\"product name: \", product_name);\n  return (\n    <Card\n      style={{\n        height: \"auto\",\n        width: \"auto\",\n        maxWidth: \"600px\",\n        position: \"relative\",\n      }}\n    >\n      <CardHeader\n        title={review.product_title}\n        subheader={review.review_headline}\n      ></CardHeader>\n      <CardMedia\n        image={`https://loremflickr.com/320/240/${product_name}`}\n        style={{\n          height: \"35vh\",\n          width: \"auto\",\n        }}\n      />\n      <CardContent>{review.review_body}</CardContent>\n      <CardContent>{review.review_date}</CardContent>\n    </Card>\n  );\n};\n\nexport default OriginalReview;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Fade from \"@material-ui/core/Fade\";\nimport Button from \"@material-ui/core/Button\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  placeholder: {\n    height: 40,\n  },\n}));\n\nexport default function DelayingAppearance(props) {\n  const classes = useStyles();\n  const [query, setQuery] = React.useState(\"idle\");\n  const timerRef = React.useRef();\n\n  React.useEffect(\n    () => () => {\n      clearTimeout(timerRef.current);\n    },\n    []\n  );\n\n  const handleClickQuery = () => {\n    clearTimeout(timerRef.current);\n\n    if (query !== \"idle\") {\n      setQuery(\"idle\");\n      return;\n    }\n\n    setQuery(\"progress\");\n    timerRef.current = setTimeout(() => {\n      setQuery(\"success\");\n    }, 2000);\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.placeholder}>\n        {query === \"success\" ? (\n          <Typography>Success!</Typography>\n        ) : (\n          <Fade\n            in={query === \"progress\"}\n            style={{\n              transitionDelay: query === \"progress\" ? \"800ms\" : \"0ms\",\n            }}\n            unmountOnExit\n          >\n            <CircularProgress />\n          </Fade>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Rating } from \"@material-ui/lab\";\nimport { FormControl, TextField, Button } from \"@material-ui/core\";\nimport DelayingAppearance from \"./submitReviewProgress\";\n\nclass MetaReviewForm extends Component {\n  render() {\n    return (\n      <form name=\"metaReviewForm\">\n        <FormControl>\n          <TextField\n            name=\"metaReviewAuthor\"\n            id=\"reviewer-name\"\n            label=\"Name\"\n            variant=\"outlined\"\n            required\n            onChange={(event) => this.props.onMetaInputChange(event)}\n            value={this.props.metaReview.metaReviewAuthor}\n          ></TextField>\n\n          <Rating\n            name=\"metaRating\"\n            onChange={(event) => this.props.onMetaInputChange(event)}\n            value={this.props.metaReview.metaRating}\n          ></Rating>\n\n          <TextField\n            name=\"metaReviewText\"\n            id=\"meta-review-description\"\n            label=\"Review\"\n            multiline\n            rows={4}\n            variant=\"outlined\"\n            onChange={(event) => this.props.onMetaInputChange(event)}\n            value={this.props.metaReview.metaReviewText}\n          ></TextField>\n\n          <Button\n            onClick={(event) => this.props.onSubmitPressed(event)}\n            fullWidth\n            style={{ backgroundColor: \"#43b581\" }}\n          >\n            Submit Review\n          </Button>\n          {/* <DelayingAppearance /> */}\n        </FormControl>\n      </form>\n    );\n  }\n}\n\nexport default MetaReviewForm;\n","import React, { Component } from \"react\";\nimport MetaReviewForm from \"./metaReviewForm\";\nimport { Card, CardContent, CardHeader } from \"@material-ui/core\";\nimport DelayingAppearance from \"./submitReviewProgress\";\n\nclass MetaReview extends Component {\n  render() {\n    const { metaReview, onMetaInputChange, onSubmitPressed } = this.props;\n\n    return (\n      <React.Fragment>\n        <Card style={{ position: \"relative\" }}>\n          <CardHeader title=\"Review this review!\"></CardHeader>\n          <CardContent>\n            <MetaReviewForm\n              metaReview={metaReview}\n              onMetaInputChange={onMetaInputChange}\n              onSubmitPressed={onSubmitPressed}\n            ></MetaReviewForm>\n            <DelayingAppearance />\n          </CardContent>\n        </Card>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default MetaReview;\n","import React, { Component } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport NavBar from \"./components/navbar\";\nimport OriginalReview from \"./components/originalReview\";\nimport MetaReview from \"./components/metaReview\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    review: {},\n    metaReview: {},\n  };\n\n  // constructor(props) {\n  // super(props);\n  // }\n\n  componentDidMount() {\n    this.getRandomOriginalReview(\"getrandomv2\");\n  }\n\n  getRandomOriginalReview = async (url) => {\n    const response = await fetch(`/${url}`);\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message);\n    }\n\n    console.log(\"state: \", this.state);\n\n    this.setState((prevState) => {\n      let review = { ...prevState.review };\n      let metaReview = { ...prevState.metaReview };\n      review = body;\n      return { review, metaReview };\n    });\n  };\n\n  postMetaReview = async (formState) => {\n    const saveData = { ...formState, product_id: this.state.review.product_id };\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ saveData }),\n    };\n    const response = await fetch(\"/savemetareview\", requestOptions);\n    const data = await response.json();\n  };\n\n  handleMetaInputChange = (event) => {\n    const {\n      target: { name, value },\n    } = event;\n    this.setState((prevState) => {\n      let metaReview = { ...prevState.metaReview, [name]: value };\n      return { metaReview };\n    });\n  };\n\n  handleSubmitReview = (event) => {\n    // event.preventDefault();\n    // console.log(\"before setstate \", this.state);\n    // this.setState(\n    // (prevState) => {\n    // let metaReview = {\n    // ...prevState.metaReview,\n    // product_id: this.state.review.product_id,\n    // };\n    // return { metaReview };\n    // },\n    // () => console.log(this.state)\n    // // () => this.postMetaReview(this.state.metaReview)\n    // );\n    this.postMetaReview(this.state.metaReview);\n\n    this.setState((prevState) => {\n      let metaReview = { ...prevState.metaReview };\n      metaReview.metaReviewAuthor = \"\";\n      metaReview.metaRating = 0;\n      metaReview.metaReviewText = \"\";\n      return { metaReview };\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar />\n        <div>\n          <Grid\n            container\n            spacing={5}\n            direction=\"column\"\n            alignItems=\"center\"\n            justify=\"center\"\n            style={{\n              backgroundColor: \"#23272a\",\n              minHeight: \"100vh\",\n              margin: 0,\n              width: \"100%\",\n            }}\n          >\n            <Grid item>\n              <OriginalReview review={this.state.review} />\n            </Grid>\n            <Grid item>\n              <MetaReview\n                metaReview={this.state.metaReview}\n                onMetaInputChange={this.handleMetaInputChange}\n                onSubmitPressed={this.handleSubmitReview}\n              />\n            </Grid>\n          </Grid>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}